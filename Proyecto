#include <Arduino.h>
#include "apwifieeprommode.h" // Asegúrate de tener este archivo en tu proyecto
#include <EEPROM.h>
#include <FirebaseESP32.h>
#include <ESP32Servo.h>
#include <DHT.h>
#include <WiFi.h>

// Configuración de Firebase
FirebaseData firebaseData;
FirebaseConfig config;
FirebaseAuth auth;

// Credenciales de Firebase
#define URL "smartpill-333fd-default-rtdb.firebaseio.com"
#define CLAV "fPrWcxUzNdvWjH9VhbLzJOfrRWwq46azMJQD1zjM"

// Configuración del sensor DHT11
#define DHTPIN 32       // Pin donde se conecta el sensor DHT11
#define DHTTYPE DHT11   // Definir tipo de sensor DHT11

// Pines y configuración del sensor ultrasónico
#define TRIG_PIN 23
#define ECHO_PIN 22

// Pines de los servos
Servo rojo, blanco, dispensador;

// Variables para los sensores
DHT dht(DHTPIN, DHTTYPE);
long duration;
int distance;

// Variables de estado
bool activation_status = false;
bool activation_status2 = false;
bool dispensar_status = false;
bool dispensar_status2 = false;

const char* apName = "MiESP32";
const char* apPassword = "12345678";


// Función para medir distancia con el sensor ultrasónico
void medirDistancia() {
    digitalWrite(TRIG_PIN, LOW);
    delayMicroseconds(2);
    digitalWrite(TRIG_PIN, HIGH);
    delayMicroseconds(10);
    digitalWrite(TRIG_PIN, LOW);
    duration = pulseIn(ECHO_PIN, HIGH);
    distance = duration * 0.034 / 2; // Fórmula para convertir el tiempo en distancia
}

// Función para mover un servo a una posición específica
void moverServo(Servo& servo, int posFinal, const char* nombre) {
    Serial.printf("Moviendo servo %s a posición %d\n", nombre, posFinal);
    servo.write(posFinal);
    delay(500); // Pausa para garantizar el movimiento
}

// Función para mover un servo en bucle entre dos posiciones
void moverEnBucle(Servo& servo, int posInicio, int posFin, const char* nombre) {
    Serial.printf("Moviendo servo %s en bucle\n", nombre);

    // Mover hacia posición inicial
    for (int i = posFin; i >= posInicio; i--) {
        servo.write(i);
        delay(10);
    }

    // Mover hacia posición final
    for (int i = posInicio; i <= posFin; i++) {
        servo.write(i);
        delay(10);
    }
}

void setup() {
    Serial.begin(115200);

    // Intentar conexión usando las redes guardadas en EEPROM
    intentoconexion(apName, apPassword);

    if (WiFi.status() == WL_CONNECTED) {
        Serial.println("Conectado a Wi-Fi con éxito");
        Serial.print("IP local: ");
        Serial.println(WiFi.localIP());
    } else {
        Serial.println("Error al conectar a Wi-Fi. Verifique la configuración.");
        return;
    }

    // Configurar Firebase
    config.host = URL;
    config.signer.tokens.legacy_token = CLAV;
    config.timeout.serverResponse = 10 * 1000; // 10 segundos
    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);

    Serial.println("Firebase inicializado con éxito");

    // Configuración de servos
    rojo.attach(19);
    blanco.attach(18);
    dispensador.attach(5);

    // Posiciones iniciales
    rojo.write(180);      
    blanco.write(180);    
    dispensador.write(180);

    // Configuración del sensor DHT11
    dht.begin();

    // Configuración del sensor ultrasónico
    pinMode(TRIG_PIN, OUTPUT);
    pinMode(ECHO_PIN, INPUT);
}

void loop() {
    // Lectura de Firebase
    if (Firebase.getBool(firebaseData, "/activation_status/activation_status")) {
        activation_status = firebaseData.boolData();
    } else {
        Serial.printf("Error leyendo activation_status: %s\n", firebaseData.errorReason().c_str());
    }

    if (Firebase.getBool(firebaseData, "/activation_status/activation_status2")) {
        activation_status2 = firebaseData.boolData();
    } else {
        Serial.printf("Error leyendo activation_status2: %s\n", firebaseData.errorReason().c_str());
    }

    if (Firebase.getBool(firebaseData, "/activation_status/dispensar_status")) {
        dispensar_status = firebaseData.boolData();
    } else {
        Serial.printf("Error leyendo dispensar_status: %s\n", firebaseData.errorReason().c_str());
    }

    if (Firebase.getBool(firebaseData, "/activation_status/dispensar_status2")) {
        dispensar_status2 = firebaseData.boolData();
    } else {
        Serial.printf("Error leyendo dispensar_status2: %s\n", firebaseData.errorReason().c_str());
    }

    // Medición de distancia con el sensor ultrasónico
    medirDistancia();

    if (distance < 4) {
        if (activation_status) {
            moverEnBucle(rojo, 25, 180, "rojo"); // Mover servo rojo
        }
        if (activation_status2) {
            moverEnBucle(blanco, 12, 180, "blanco"); // Mover servo blanco
        }
    } else {
        // Si la distancia es mayor, los servos rojo y blanco regresan a 180
        moverServo(rojo, 180, "rojo");
        moverServo(blanco, 180, "blanco");
    }

    // Control del dispensador
    if (dispensar_status == true) { // Si dispensar_status es 1 (true)
        moverServo(dispensador, 180, "dispensador");
    } else if (dispensar_status2 == true) { // Si dispensar_status2 es 1 (true)
        moverServo(dispensador, 90, "dispensador");
    } else {
        // Si ninguno de los dos es true, el dispensador se queda en la posición actual
        // No es necesario hacer nada, solo asegura que no se mueva.
    }

    // Lecturas de los sensores (temperatura y humedad)
    float humidity = dht.readHumidity();
    float temperature = dht.readTemperature();

    // Enviar los valores del sensor a Firebase
    if (Firebase.setFloat(firebaseData, "/sensor/temperature", temperature)) {
        Serial.println("Temperatura enviada con éxito");
    } else {
        Serial.printf("Error enviando temperatura: %s\n", firebaseData.errorReason().c_str());
    }

    if (Firebase.setFloat(firebaseData, "/sensor/humidity", humidity)) {
        Serial.println("Humedad enviada con éxito");
    } else {
        Serial.printf("Error enviando humedad: %s\n", firebaseData.errorReason().c_str());
    }

    // Enviar los valores divididos entre 10
    if (Firebase.setFloat(firebaseData, "/sensor/temperatureDiv10", temperature / 10.0)) {
        Serial.println("Temperatura dividida por 10 enviada con éxito");
    } else {
        Serial.printf("Error enviando temperatura dividida por 10: %s\n", firebaseData.errorReason().c_str());
    }

    if (Firebase.setFloat(firebaseData, "/sensor/humidityDiv10", humidity / 10.0)) {
        Serial.println("Humedad dividida por 10 enviada con éxito");
    } else {
        Serial.printf("Error enviando humedad dividida por 10: %s\n", firebaseData.errorReason().c_str());
    }

    // Enviar la distancia del sensor a Firebase
    if (Firebase.setInt(firebaseData, "/sensor/distance", distance)) {
        Serial.println("Distancia enviada con éxito");
    } else {
        Serial.printf("Error enviando distancia: %s\n", firebaseData.errorReason().c_str());
    }

    // Mostrar valores en Serial
    Serial.printf("Distancia: %ld cm\n", distance);
    Serial.printf("Temperatura: %.2f C\n", temperature);
    Serial.printf("Humedad: %.2f %%\n", humidity);

    delay(1000); // Espera de 2 segundos antes de la siguiente lectura
}
